// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  RIDER
  CUSTOMER
  GUEST
}

model User {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  role           Role
  username       String?    @unique
  email          String?
  provider       String?
  providerId     String?    @unique
  password       String?
  contactNumber  String?
  name           String?
  profileIconUrl String?
  addresses      Address[]
  orders         Order[]
  Feedback       Feedback[]
}

model Address {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  phoneNumber   String?
  address       String?
  city          String?
  province      String?
  nickname      String
  contactPerson String?
  Order         Order[]
}

enum Status {
  IN_CART
  PACKAGING
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentOption {
  COD
  CARD
  GCASH
  PAYMAYA
  GRABPAY
}

model Order {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  User             User?          @relation(fields: [userId], references: [id])
  userId           String?
  amount           Int
  status           Status
  paymentOption    PaymentOption?
  paymentReference String?
  sourceId         String?
  addressId        String?
  Address          Address?       @relation(fields: [addressId], references: [id])
  paidAt           DateTime?
  paymentIntentId  String?
  riderId          String?
  orderItems       OrderItem[]
  Product          Product[]
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String // relation scalar field (used in the `@relation` attribute above)
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

enum Category {
  PORK
  CHICKEN
  BEEF
}

model Product {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  imageUrl    String?
  name        String
  category    Category
  price       Int
  weight      Int
  stock       Int
  description String?
  brand       String?
  quantity    Int         @default(0)
  Order       Order?      @relation(fields: [orderId], references: [id])
  orderId     String?
  OrderItem   OrderItem[]
}

model Feedback {
  id        String   @id @default(uuid())
  feedback  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
